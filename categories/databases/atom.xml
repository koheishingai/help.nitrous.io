<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[databases | ]]></title>
  <link href="/categories/databases/atom.xml" rel="self"/>
  <link href="/"/>
  <updated>2013-07-11T20:57:22+00:00</updated>
  <id>/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="https://github.com/recurser/jekyll-plugins">Recurser</generator>

  
  <entry>
    <title type="html"><![CDATA[Create a postgres development database]]></title>
    <link href="/postgres"/>
    <updated>2013-06-28T00:00:00+00:00</updated>
    <id>/postgres</id>
    <content type="html"><![CDATA[<p>This guide walks through how you can setup a Heroku Postgres database on your Nitrous.IO box.</p>

<h3 id='create_a_database_on_heroku_postgres'>Create a Database on Heroku Postgres</h3>

<p>In: <a href='https://postgres.heroku.com'>Heroku Postgres</a></p>

<p><img alt='Heroku Postgres Homepage' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/postgres/hpgres.png' /></p>

<p>Go ahead and sign into Heroku Postgres. Once in the dashboard, you&#8217;ll see a list of any databases you&#8217;ve already created. Click the &#8220;Create Database&#8221; button on the top-right of the screen. You&#8217;ll see a bunch of professional plans appear below. You can ignore these until you&#8217;ve deployed your new world-changing application to production and you have millions of customers and can afford them.</p>

<p>Heroku knows we need something lightweight to get our feet wet, so for now we&#8217;ll just pick the &#8220;Dev Plan (free)&#8221; option.</p>

<p><img alt='Dev Plan Button' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/postgres/dev-plan.png' /></p>

<p>You&#8217;ll see your new database at the top of your list of databases (or just one if you just created an account). Heroku will create a zen name for you, the one we created happens to have the name &#8220;salty-water-676&#8221;.</p>

<p><img alt='Create Database' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/postgres/create-database.png' /></p>

<p>For clarity lets rename the database so we know it&#8217;s a development database. Click the database you just created to navigate to the database dashboard. Click the database title and a modal will appear where you can change the name of your database. Rename it something relevant to your application, for e.g. if you were to make a to-do app, you can rename it to &#8220;todo-app-dev&#8221;.</p>

<p><img alt='Rename Database' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/postgres/database-rename.png' /></p>

<h3 id='heroku_postgres_connection_settings'>Heroku Postgres Connection Settings</h3>

<p>In the <em>Heroku Postgres</em> website, click your database name (todo-app-dev) to get to the database dashboard. You will see your database connection settings listed, including &#8220;Host&#8221;, &#8220;Database&#8221;, &#8220;User&#8221;, &#8220;Port&#8221;, &#8220;Password&#8221; (you will need to click &#8216;Show&#8217; to reveal your password).</p>

<p><img alt='Heroku Settings' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/postgres/heroku-settings.png' /></p>

<p>Grab each of the values and assign them to environment variables in your &#8220;~/.bashrc&#8221; file on your Nitrous.IO box. This will ensure that every time you log into your Nitrous.IO box, your database credentials will be available as environment variables to use in any of your apps. It is good practice to namespace your environment variables with the environment that you want to use your database in (development or test), like so:</p>

<p><img alt='Env Variables' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/postgres/env-variables.png' /></p>

<p>If you want the environment variables to be loaded immediately, run: source ~/.bashrc</p>

<p>You can verify that your Postgres credentials are loaded correctly by running: echo $TODO_APP_DEV_HOST</p>

<p>This should return &#8220;ec2-107-22-164-225.compute-1.amazonaws.com&#8221;</p>

<h4 id='railsruby'>Rails/Ruby</h4>

<p>You can now access your database in your Rails application by doing the following:</p>

<pre><code>ENV[&#39;TODO_APP_DEV_HOST&#39;]
ENV[&#39;TODO_APP_DEV_PORT&#39;]
ENV[&#39;TODO_APP_DEV_USER&#39;]
ENV[&#39;TODO_APP_DEV_PASSWORD&#39;]
ENV[&#39;TODO_APP_DEV_DATABASE&#39;]</code></pre>

<p>(Please note, you&#8217;ll probably need to install the <a href='http://rubygems.org/gems/pg'>pg</a> Rubygem before you use Postgres in a Rails app, using the following command:</p>

<pre><code>gem install pg</code></pre>

<p>Here&#8217;s an example of database.yml file used in Rails which uses the environment variables to connect to the Heroku Postgres database you created.</p>

<p><img alt='Rails Postgres Settings' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/postgres/database-ruby.png' /></p>

<p>A more detailed tutorial is present on the <a href='http://blog.nitrous.io/2013/02/11/postgres-action-io-3.html'>Nitrous.IO blog</a></p>

<h4 id='nodejs'>Node.JS</h4>

<p>In Node.JS, you can access each of the environment variables by using:</p>

<pre><code>process.env.TODO_APP_DEV_HOST
process.env.TODO_APP_DEV_PORT
process.env.TODO_APP_DEV_USER
process.env.TODO_APP_DEV_PASSWORD
process.env.TODO_APP_DEV_DATABASE</code></pre>

<p>(Please note, you&#8217;ll probably need to install the <a href='https://npmjs.org/package/pg'>pg</a> NPM before you use Postgres in a Node.JS app, using the following command:</p>

<pre><code>npm install -g pg</code></pre>

<p>Here&#8217;s an example nodejs code to connect to Heroku Postgres using the environment variables we have set up.</p>

<p><img alt='Postgres Settings' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/postgres/database-nodejs.png' /></p>

<h4 id='djangopython'>Django/Python</h4>

<p>In Python, you can access each of the environment variables by using:</p>

<pre><code>os.environ[&#39;TODO_APP_DEV_HOST&#39;]
os.environ[&#39;TODO_APP_DEV_PORT&#39;]
os.environ[&#39;TODO_APP_DEV_USER&#39;]
os.environ[&#39;TODO_APP_DEV_PASSWORD&#39;]
os.environ[&#39;TODO_APP_DEV_DATABASE&#39;]</code></pre>

<p>(Please note, you&#8217;ll probably need to install the <a href='http://initd.org/psycopg/'>psycopg2</a> module before you use Postgres in a Django app, using the following command:</p>

<pre><code>pip install --user psycopg2</code></pre>

<p>Here&#8217;s an example of a settings.py file which initializes the Heroku Postgres credentials for use within a Django app.</p>

<p><img alt='Postgres Settings' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/postgres/database-python.png' /></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up MongoDB]]></title>
    <link href="/mongodb"/>
    <updated>2013-06-28T00:00:00+00:00</updated>
    <id>/mongodb</id>
    <content type="html"><![CDATA[<p>This guide walks through how you can setup a MongoDB database on your Nitrous.IO box.</p>

<p>In: <a href='https://mongolab.com'>MongoLab</a></p>

<p><img alt='MongoLab' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/mongodb/mongolab.png' /></p>

<p>Go ahead and sign into MongoLab. Once in the dashboard, you&#8217;ll see a list of any databases you&#8217;ve already created. Click the <strong>Create New</strong> button in the <strong>Databases</strong> section.</p>

<p>You&#8217;ll see a bunch of professional plans appear below. You can ignore these until you&#8217;ve deployed your new world-changing application to production and you have millions of customers and can afford them.</p>

<p>MongoLab knows we need something lightweight to get our feet wet, so for now we&#8217;ll just pick the <strong>Free (0.5GB)</strong> plan.</p>

<p>Pick your Cloud Provider to be <strong>Amazon Web Services</strong> and choose either the <strong>EU-West-1 (Ireland)</strong> or <strong>US-East-1 (Virginia)</strong> - whichever is geographically close to the Nitrous.IO box that you created.</p>

<p>Pick a name for your database, say <strong>my-awesome-apps-mongodb</strong> as well as a username and password (which you will use later to connect to your MongoDB database).</p>

<p><img alt='Pick Plan Button' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/mongodb/pick-plan.png' /></p>

<p>You&#8217;ll see your new database at the top of your list of databases (or just one if you just created an account).</p>

<p><img alt='Create Database' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/mongodb/create-database.png' /></p>

<h3 id='mongolab_database_connection_settings'>MongoLab Database Connection Settings</h3>

<p>In the <em>MongoLab</em> website, click your database name (my-awesome-apps-mongodb) to get to the database dashboard. You will see your database connection URL listed. The username/password combination is the one you set earlier while creating your database.</p>

<p><img alt='MongoLab Settings' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/mongodb/mongodb-settings.png' /></p>

<p>As seen in the screenshot, <strong>ds043447.mongolab.com</strong> is the host, <strong>43447</strong> is the port, <strong>my-awesome-apps-mongodb</strong> is the database name, <strong>dbuser</strong>, <strong>dbpassword</strong> is the username/password combination that you set earlier.</p>

<p>Grab each of the values and assign them to environment variables in your <strong>~/.bash_profile</strong> file on your Nitrous.IO box. It is good practice to namespace your environment variables variables with the environment that you want to use your database in (development or test), like so:</p>

<p><img alt='Env Variables' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/mongodb/env-variables.png' /></p>

<p>(Note: Some libraries for e.g. Ruby&#8217;s Mongoid gem prefers to use the URI format, so &#8220;MONGODB_DEVELOPMENT_URI&#8221; is also included as part of your environment variables).</p>

<p>This will ensure that every time you log into your Nitrous.IO box, your database credentials will be available as environment variables to use in any of your apps.</p>

<p>If you want the environment variables to be loaded immediately, run</p>

<pre><code>source ~/.bash_profile</code></pre>

<p>You can verify that your MongoDB credentials are loaded correctly by running</p>

<pre><code>echo $MONGODB_DEVELOPMENT_HOST</code></pre>

<p>This should return <strong>ds043447.mongolab.com</strong></p>

<h3 id='connecting_with_the_official_mongodb_client'>Connecting with the Official MongoDB Client</h3>

<p>All Nitrous.IO boxes come bundled with the official &#8220;mongo&#8221; client which can be used to connect to the database. You can connect to the MongoLab MongoDB database that you just created, by using the command</p>

<pre><code>mongo --shell --host $MONGODB_DEVELOPMENT_HOST --port $MONGODB_DEVELOPMENT_PORT -u $MONGODB_DEVELOPMENT_USERNAME -p $MONGODB_DEVELOPMENT_PASSWORD $MONGODB_DEVELOPMENT_DB</code></pre>

<p><img alt='MongoDB Shell' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/mongodb/shell.png' /></p>

<h3 id='railsruby'>Rails/Ruby</h3>

<p>You can now access your database in your Rails application for e.g. by using</p>
<pre class='prettyprint lang-ruby'>
ENV['MONGODB_DEVELOPMENT_URI']
</pre>
<p>We recommend using the mongoid gem which you can install using:</p>

<pre><code>gem install mongoid</code></pre>

<p>If you are running a Rails app, remember to include mongoid as part of your Gemfile and run</p>

<pre><code>rails generate mongoid:config</code></pre>

<p><img alt='rails generate mongoid:config' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/mongodb/mongoid.png' /></p>

<p>Then in your &#8220;development&#8221; environment, under the default session, set the uri to be &#8220;ENV<span>&#8216;MONGODB_DEVELOPMENT_URI&#8217;</span>&#8221;</p>

<p><img alt='Rails MongoDB Settings' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/mongodb/database-ruby.png' /></p>

<h3 id='nodejs'>Node.JS</h3>

<p>In Node.JS, you can access each of the environment variables by using</p>
<pre class='prettyprint lang-javascript'>
process.env.MONGODB_DEVELOPMENT_HOST, process.env.MONGODB_DEVELOPMENT_PORT,
process.env.MONGODB_DEVELOPMENT_USER, process.env.MONGODB_DEVELOPMENT_PASSWORD,
process.env.MONGODB_DEVELOPMENT_DB, process.env.MONGODB_DEVELOPMENT_URI
</pre>
<p>(Please note, you&#8217;ll probably need to install the <a href='https://npmjs.org/package/mongoose'>mongoose</a> NPM before you use Postgres in a Node.JS app, using the following command:</p>

<pre><code>npm install mongoose</code></pre>

<p>Here&#8217;s an example of how you can connect to your MongoLab database using mongoose</p>

<p><img alt='Node.JS MongoDB Settings' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/mongodb/database-nodejs.png' /></p>

<h3 id='djangopython'>Django/Python</h3>

<p>In Python, you can access each of the environment variables by using</p>
<pre class='prettyprint lang-python'>
os.environ['MONGODB_DEVELOPMENT_HOST'], os.environ['MONGODB_DEVELOPMENT_PORT'],
os.environ['MONGODB_DEVELOPMENT_USER'], os.environ['MONGODB_DEVELOPMENT_PASSWORD'],
os.environ['MONGODB_DEVELOPMENT_DB'], os.environ['MONGODB_DEVELOPMENT_URI']
</pre>
<p>The instructions in the official MongoDB documentatin for Python is an excellent guide, but you can replace the settings in settings.py with the MongoLab variables, like so:</p>

<p><img alt='Python MongoDB Settings' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/mongodb/database-python.png' /></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a  Rails app with Amazon RDS]]></title>
    <link href="/amazon-rds"/>
    <updated>2013-06-28T00:00:00+00:00</updated>
    <id>/amazon-rds</id>
    <content type="html"><![CDATA[<p>With <a href='http://aws.amazon.com/rds/'>Amazon RDS</a> you can quickly and easily provision and maintain a MySQL, Oracle, or Microsoft SQL Server instance in the cloud. Lets go over how to get started with a Rails app using the Amazon RDS MySQL engine.</p>

<h3 id='prerequisites'>Prerequisites</h3>

<p>Before we get started, make sure you have the following:</p>

<ul>
<li>An <a href='http://aws.amazon.com/'>Amazon Web Services Account</a></li>

<li>An <a href='https://nitrous.io'>Nitrous.IO account</a></li>
</ul>

<h3 id='adding_a_security_group_with_amazon_rds'>Adding a Security Group with Amazon RDS</h3>

<p>Lets add the Nitrous.IO box to the Amazon RDS security group. Since This EC2 box will be running in the same region as the Amazon RDS (US West) we can add the internal IP into the Security Group.</p>

<p>Ping your Rails box URI within the Nitrous.IO console to find the internal IP:</p>

<pre><code>$ ping rails-box-3921.usw1.actionbox.io
PING ec2-184-169-182-155.us-west-1.compute.amazonaws.com (10.168.125.111) 56(84) bytes of data.
64 bytes from ip-10-168-125-111.us-west-1.compute.internal (10.168.125.111): icmp_req=1 ttl=64 time=0.130 ms</code></pre>

<p>Login to your <a href='https://console.aws.amazon.com/rds/home'>Amazon RDS Console</a>, navigate to Security Groups and create a new security group using the internal IP as a CIDR/IP connection type.</p>

<p><img alt='Security Group Details' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/amazon_rds_security_group.png' /></p>

<h3 id='setting_up_a_new_instance_with_amazon_rds'>Setting Up a New Instance with Amazon RDS</h3>

<p>Within your <a href='https://console.aws.amazon.com/rds/home'>Amazon RDS Console</a> you will want to navigate to Instances and Launch a new DB Instance. When prompted, select the MySQL Database Engine.</p>

<p>When setting up the database remember to select the Security Group you have just created.</p>

<p><img alt='Amazon RDS Settings' src='https://raw.github.com/action-io/action-assets/master/support/screenshots/amazon_instance_setting.png' /></p>

<h3 id='create_a_rails_app_on_nitrousio'>Create a Rails app on Nitrous.IO</h3>

<p>Login to Nitrious.IO and create or open up a Rails box. Within the console enter in the following commands:</p>

<pre><code>$ rails new blog
$ cd blog</code></pre>

<p>At this point you can test your Rails app with the following command:</p>

<pre><code>$ rails server</code></pre>

<p>Once the app is running, you can view it by navigating to <strong>Preview > Port 3000</strong> in your Nitrous.IO IDE.</p>

<h3 id='setting_up_the_database_configurations'>Setting up the Database configurations</h3>

<p>The next step is to configure the app to connect to Amazon RDS.</p>

<p>Within config/database.yml, configure your development environment to use the following variables:</p>

<pre><code>development:
 adapter: mysql2
 encoding: utf8
 database: &lt;%= ENV[&#39;RDS_DB_NAME&#39;] %&gt;
 username: &lt;%= ENV[&#39;RDS_USERNAME&#39;] %&gt;
 password: &lt;%= ENV[&#39;RDS_PASSWORD&#39;] %&gt;
 host: &lt;%= ENV[&#39;RDS_HOSTNAME&#39;] %&gt;
 port: &lt;%= ENV[&#39;RDS_PORT&#39;] %&gt;</code></pre>

<p>For our test and production databases, we&#8217;ll be provisioning new databases on Amazon RDS. If you want to create a test database (&#8220;blog-app-test&#8221;), just repeat these instructions.</p>

<p>As you can see we have changed the adapter to use mysql2 which is the adapter Amazon RDS uses. You will also need to install the following gem in order to add support for this:</p>

<pre><code>$ gem install mysql2
$ bundle install</code></pre>

<p>Add the mysql2 gem to your Gemfile:</p>

<pre><code>gem &#39;mysql2&#39;</code></pre>

<h3 id='creating_the_database'>Creating the Database</h3>

<p>The App should now have access to the Amazon RDS instance. Run the following commands to create a new database, create a new table, and migrate it to Amazon RDS:</p>

<pre><code>$ rake db:create
$ rails generate controller home index
$ rails generate scaffold Post name:string title:string content:text
$ rake db:migrate</code></pre>

<h3 id='configuring_your_routes_and_adding_a_link'>Configuring your Routes and Adding a Link</h3>

<p>You will first need to remove your static index file:</p>

<pre><code>$ rm public/index.html</code></pre>

<p>Add the following route into config/routes.rb:</p>

<pre><code>Blog::Application.routes.draw do
  root :to =&gt; &quot;home#index&quot;
end</code></pre>

<p>Open app/views/home/index.html.erb and modify it to include the following code:</p>

<pre><code>&lt;h1&gt;Hello, Rails!&lt;/h1&gt;
&lt;%= link_to &quot;My Blog&quot;, posts_path %&gt;</code></pre>

<h3 id='previewing_the_app'>Previewing the App</h3>

<p>Once the database is successfully migrated, run the following command:</p>

<pre><code>$ rails server</code></pre>

<p>You can now view the Rails App by navigating to <strong>Preview > Port 3000</strong> in your Nitrous.IO IDE.</p>

<p>For our regular users: How&#8217;d it go for you? If you&#8217;re having trouble, you can always get in touch with us by visiting our <a href='https://action.io/chat'>chatroom</a> or by <a href='mailto:support@action.io'>emailing us</a>.</p>]]></content>
  </entry>
  
</feed>